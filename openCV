import cv2
import numpy as np


def resizer(img):
    #Augment Size
    if height<300 or width<400:
        img = cv2.resize(img,None,fx=2, fy=2, interpolation = cv2.INTER_CUBIC)
        return img
    #Reduce Size
    elif height>800 or width>1000:
        r = 500.0 / img.shape[1]
        dim = (500, int(img.shape[0] * r))
        img = cv2.resize(img, dim, interpolation = cv2.INTER_AREA)
        return img
    else:
        return img

def douglas_peucker(contours):
    #Contour aproxiation, Douglas-Peucker algorithm
    epsilon = 0.01*cv2.arcLength(contours,True) #The 0.01 represents a percentage
    approx = cv2.approxPolyDP(contours,epsilon,True)
    return approx


def rectangle_rotation(approx):
    rect = cv2.minAreaRect(approx)#(center (x,y), (width, height), angle of rotation)
    print("Rotation: " + str(rect[2]))


def identifier(img,approx):
    if len(approx)==4 or len(approx)==6:
        print("cube")
##        cv2.drawContours(img,[cnt],-1,(255,0,0),3)
        cv2.drawContours(img,approx,-1,(255,0,0),3)
        cv2.putText(img,'Cube',pt,cv2.FONT_HERSHEY_COMPLEX,2,[0,255,255],2)
        rectangle_rotation(approx)
    elif len(approx)>=8:
        print("Cylinder")
##        cv2.drawContours(img,[cnt],-1,(255,0,0),3)
        cv2.drawContours(img,approx,-1,(255,0,0),3)
        cv2.putText(img,'Cylinder',pt,cv2.FONT_HERSHEY_COMPLEX,2,[0,255,255],2)
    else:
##        cv2.drawContours(img,[cnt],-1,(255,0,0),3)
        cv2.drawContours(img,approx,-1,(255,0,0),3)

#Data adquisition

img = cv2.imread('cubos/top_2.jpg')
height, width = img.shape[:2]
img = resizer(img)

#Pre-processing

gray = cv2.cvtColor(img,cv2.COLOR_RGB2GRAY)
##noise_removal = cv2.bilateralFilter(gray,9,75,75)
thresh = cv2.adaptiveThreshold(gray,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C,cv2.THRESH_BINARY,51,11)
canny_img = cv2.Canny(thresh,250,255)
canny_img = cv2.convertScaleAbs(canny_img)


#Processing
kernel = np.ones((3,3),np.uint8)
dilated_img = cv2.dilate(canny_img,kernel,iterations=1)
im2, contours, h = cv2.findContours(dilated_img, 1,2)
contours = sorted(contours, key=cv2.contourArea, reverse=True)[:1]
cnt = contours[0] #contours
    
#Post-filtering

#Recognition
pt = (180,3*img.shape[0]//4)
for cnt in contours:
    approx = douglas_peucker(cnt)
    print("Number of corners: " + str(len(approx)))
    identifier(img, approx)

    
cv2.imshow('img',img)
cv2.waitKey(0)
cv2.destroyAllWindows()

